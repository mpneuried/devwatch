#!/usr/bin/env node
// Generated by CoffeeScript 1.3.3
var DevWatch, args, dw, exec, fs, growl, imgbasePath, path, util,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require("fs");

util = require('util');

path = require('path');

exec = require('child_process').exec;

growl = require('growl');

imgbasePath = path.resolve(__dirname + "/imgs/");

console.log(imgbasePath);

DevWatch = (function(_super) {

  __extends(DevWatch, _super);

  function DevWatch() {
    this._findFiles = __bind(this._findFiles, this);

    this.getFiles = __bind(this.getFiles, this);

    this.getDir = __bind(this.getDir, this);

    this._calcCmd = __bind(this._calcCmd, this);

    this.run = __bind(this.run, this);

    this._onFileChanged = __bind(this._onFileChanged, this);

    this.watch = __bind(this.watch, this);
    return;
  }

  DevWatch.prototype.watch = function(filter, cmds) {
    var _this = this;
    this.getFiles(filter, function(err, files) {
      var file, idx, _i, _len;
      if (files.length) {
        for (idx = _i = 0, _len = files.length; _i < _len; idx = ++_i) {
          file = files[idx];
          console.log("\nWATCHING file: ", file);
          _this.run(files[idx], cmds);
          fs.watchFile(file, _this._onFileChanged(file, cmds));
        }
      } else {
        console.error("No matching files found");
      }
    });
  };

  DevWatch.prototype._onFileChanged = function(file, cmds) {
    var _this = this;
    return function(curr, prev) {
      if (curr.ctime.getTime() > prev.ctime.getTime()) {
        console.log("\nCHANGE detected", file);
        _this.run(file, cmds);
      }
    };
  };

  DevWatch.prototype.run = function(_file, _cmds) {
    var cmd, cmds, tmplData, _fn, _i, _len, _ref,
      _this = this;
    _ref = this._calcCmd(_file, _cmds), cmds = _ref[0], tmplData = _ref[1];
    growl("" + tmplData.name + "." + tmplData.ext, {
      title: 'DEVWATCH - RUN',
      image: imgbasePath + "/terminal_icon_blue.png"
    });
    _fn = function(cmd) {
      exec(cmd, function(err, stdout, stderr) {
        var _error, _info;
        if (stderr.length) {
          _error = stderr.replace(/\n/, '');
          console.log("ERROR", _error);
          growl(("" + tmplData.name + "." + tmplData.ext + "\n") + _error, {
            title: 'DEVWATCH - ERROR',
            image: imgbasePath + "/terminal_icon_red.png"
          });
        } else if (stdout.length) {
          _info = "info: " + stdout.replace(/\n/, '') + "\ncmd: " + cmd;
          console.log("DONE", _info);
          growl(_info, {
            title: 'DEVWATCH - DONE',
            image: imgbasePath + "/terminal_icon_green.png"
          });
        } else {
          console.log("DONE", ("file: " + tmplData.name + "." + tmplData.ext) + "\ncmd: " + cmd);
          growl(("file: " + tmplData.name + "." + tmplData.ext) + "\ncmd: " + cmd, {
            title: 'DEVWATCH - DONE',
            image: imgbasePath + "/terminal_icon_green.png"
          });
        }
      });
    };
    for (_i = 0, _len = cmds.length; _i < _len; _i++) {
      cmd = cmds[_i];
      _fn(cmd);
    }
  };

  DevWatch.prototype._calcCmd = function(__file, cmds) {
    var cmd, tmplData, _cmd, _cmds, _i, _idxExt, _idxPath, _j, _len, _name, _val;
    tmplData = {};
    _idxPath = __file.lastIndexOf("/");
    tmplData.path = __file.substr(0, _idxPath + 1);
    tmplData.file = __file.substr(_idxPath + 1);
    _idxExt = tmplData.file.lastIndexOf(".");
    tmplData.name = tmplData.file.substr(0, _idxExt);
    tmplData.ext = tmplData.file.substr(_idxExt + 1);
    _cmds = [];
    for (_i = _j = 0, _len = cmds.length; _j < _len; _i = ++_j) {
      cmd = cmds[_i];
      _cmd = cmd;
      for (_name in tmplData) {
        _val = tmplData[_name];
        _cmd = _cmd.replace("{" + (_name.toUpperCase()) + "}", _val);
      }
      _cmds.push(_cmd);
    }
    return [_cmds, tmplData];
  };

  DevWatch.prototype.getDir = function(cb) {
    if (cb == null) {
      cb = function() {};
    }
    exec('pwd', function(err, stdout, stderr) {
      cb(null, stdout.replace(/\n/, ''));
    });
  };

  DevWatch.prototype.getFiles = function(filter, cb) {
    var _this = this;
    this.getDir(function(err, wdir) {
      _this._findFiles(wdir, filter, cb);
    });
  };

  DevWatch.prototype._findFiles = function(directory, filter, cb) {
    var fileRegex, files, next, stack, _cnf,
      _this = this;
    _cnf = this.config;
    files = [];
    stack = [directory];
    fileRegex = new RegExp(filter, "ig");
    next = function() {
      var dir;
      if (!stack.length) {
        return cb(null, files);
      } else {
        dir = stack.pop();
        return fs.stat(dir, function(err, stats) {
          if (err) {
            cb(err);
          } else {
            if (!stats.isDirectory) {
              return next();
            }
            fs.readdir(dir, function(err, dirContents) {
              var file, fullpath, _i, _len;
              if (err) {
                cb(err);
              } else {
                for (_i = 0, _len = dirContents.length; _i < _len; _i++) {
                  file = dirContents[_i];
                  fullpath = path.join(dir, file);
                  if (file.indexOf(".") >= 0) {
                    if (fileRegex.test(file)) {
                      files.push(fullpath);
                    }
                  } else if (file.indexOf(".") === -1) {
                    stack.push(fullpath);
                  }
                }
                next();
              }
            });
          }
        });
      }
    };
    next();
  };

  return DevWatch;

})(require('events').EventEmitter);

args = process.argv.slice(2);

dw = new DevWatch();

dw.watch(args[0], args.slice(1));
